pipeline {
  agent any
  
   triggers {
    pollSCM('H/15 * * * *')
  }

  tools 
  { 
    nodejs 'NodeJs'
    ansible 'Ansible'
  }       
  environment {
    CI = 'true'
    REACT_APP_API_BASE_URL = credentials('api-base-url')
    REGISTRY = 'kkattlacrschedule.azurecr.io'              
    IMAGE    = "${REGISTRY}/schedule_app_kkattl"     
    TAG      = "${env.BUILD_NUMBER}-${env.GIT_COMMIT?.substring(0,7) ?: 'dev'}"
    DOCKER_DEFAULT_PLATFORM = 'linux/amd64'
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Install') {
      when {
        allOf {
          branch 'main'
          changeset 'frontend/**'
        }
      }
      steps {
        dir('frontend/frontend') {
          sh 'npm install --cache $HOME/.npm --prefer-offline'
        }
      }
    }
    

    stage('Build') {
      when {
        allOf {
          branch 'main'
          changeset 'frontend/**'
        }
      }
      steps {
        dir('frontend/frontend') {
          sh 'npm run build && zip -r build.zip build'
        }
      }
    }
    

    stage('Docker image') {
      when {
        allOf {
          branch 'main'
          changeset 'frontend/**'
        }
      }
      steps {
        dir('frontend') {
          withEnv(["PATH+DOCKER=/usr/local/bin"]) {        
            withCredentials([usernamePassword(
                credentialsId: 'acr-admin-creds',
                usernameVariable: 'USER',
                passwordVariable: 'PASS')]) {

              sh '''
                echo $PASS | docker login $REGISTRY -u $USER --password-stdin
                docker build \
                  --build-arg REACT_APP_API_BASE_URL=$REACT_APP_API_BASE_URL \
                  -t $IMAGE:$TAG -t $IMAGE:latest -f Dockerfile .
                docker push  $IMAGE:$TAG
                docker push  $IMAGE:latest
              '''
              }
          }
        }
      }
    }

     stage('Deploy via Ansible') {
      when {
        allOf {
          branch 'main'
          changeset 'frontend/**'
        }
      }
      environment {
        PATH = "/opt/homebrew/bin:${env.PATH}"
      }
      steps {
        withCredentials([
          usernamePassword(
          credentialsId: 'azure-sp-creds',
          usernameVariable: 'AZURE_CLIENT_ID',
          passwordVariable: 'AZURE_CLIENT_SECRET'
        ),
        string(
          credentialsId: 'azure-tenant-id',
          variable: 'AZURE_TENANT_ID'
        ),
        string(
          credentialsId: 'azure-subscription-id',
          variable: 'AZURE_SUBSCRIPTION_ID'
        )
          ]) {
            withCredentials([
              file(credentialsId: 'ansible-inventory', variable: 'INV_FILE')
            ]) {
              sh '''
                set -e
                az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                az account set --subscription $AZURE_SUBSCRIPTION_ID
                export ANSIBLE_CONFIG=ansible/ansible.cfg
                ansible-playbook -i "$INV_FILE" ansible/deploy_frontend.yml --extra-vars "image_tag=${TAG}"
              '''
          }
        }
      }
     }
  }
    


  post {
    success {
      archiveArtifacts artifacts: 'frontend/frontend/build.zip', fingerprint: true
    }
  }
}
