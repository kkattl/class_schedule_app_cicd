
pipeline {
  agent any
  tools { 
    jdk    'jdk'
    gradle 'gradle'
  }
  environment {
    SONAR_SERVER = 'sqs'
    REGISTRY = 'kkattlacrjenkins.azurecr.io'              
    IMAGE    = "${REGISTRY}/schedule_app_kkattl"  
    TAG      = "${BUILD_NUMBER}-${GIT_COMMIT?.substring(0,7) ?: 'dev'}"
    PATH      = "/opt/homebrew/bin:/usr/local/bin:${env.PATH}"
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Build') {
      steps {
        dir('backend/backend') {
          sh 'gradle clean build --no-daemon'
        }
      }
      post {
        always {
          junit 'backend/backend/build/test-results/**/*.xml'
        }
      }
    }

    stage('SonarQube Analysis') {
      steps {
        dir('backend/backend') {
          withCredentials([string(credentialsId: 'sonar', variable: 'SONAR_TOKEN')]) {
            withSonarQubeEnv("${SONAR_SERVER}") {
              sh 'gradle sonarqube --no-daemon -Dsonar.login=$SONAR_TOKEN'
            }
          }
        }
      }
    }


    stage('Quality Gate') {
      steps {
        script {
          def task = sh(
            script: "curl -s 'http://localhost:9000/api/ce/task?id=${env.SONAR_TASK_ID}'",
            returnStdout: true
          )
        }
      }
    }


    
    stage('Docker Build & Push') {
      steps {
        dir('backend') {                      
          withEnv(["PATH+DOCKER=/usr/local/bin"]) {
            withCredentials([
              usernamePassword(
                credentialsId: 'acr-admin-creds',
                usernameVariable: 'ACR_USER',
                passwordVariable: 'ACR_PASS'
              ),
              usernamePassword(
                credentialsId: 'postgres-creds',
                usernameVariable: 'DB_USER',
                passwordVariable: 'DB_PASS'
              ),
              string(credentialsId: 'postgres-host', variable: 'DB_HOST'),
              string(credentialsId: 'redis-host',    variable: 'REDIS_HOST')
            ]) {

              sh '''
                echo $ACR_PASS | docker login $REGISTRY -u $ACR_USER --password-stdin

                docker build --platform linux/amd64 \
                  --build-arg DATABASE=$DB_NAME \
                  --build-arg USERNAME=$DB_USER \
                  --build-arg USERPASSWORD=$DB_PASS \
                  --build-arg POSTGRES_HOST=$DB_HOST \
                  --build-arg REDIS_HOST=$REDIS_HOST \
                  -t $IMAGE:$TAG -t $IMAGE:latest \
                  -f Dockerfile .

                docker push $IMAGE:$TAG
                docker push $IMAGE:latest
              '''
            }
          }
        }
      }
    }
  }

  post {
    success { echo "Done: ${IMAGE}:${TAG}" }
    failure { echo "Failed â€“ check logs." }
  }
}
